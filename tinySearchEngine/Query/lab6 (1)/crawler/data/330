http://www.cs.dartmouth.edu/~campbell/cs50/rubric3.html
3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.tug.org/tex4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.tug.org/tex4ht/)"> 
<!-- html --> 
<meta name="src" content="rubric3.tex"> 
<meta name="date" content="2015-05-04 13:52:00"> 
<link rel="stylesheet" type="text/css" href="rubric3.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lab3 Rubric</h1>
<!--l. 20--><p class="noindent" >Remember a program or a function should do one thing and one thing well. You should start to write good
readable code from the start. Break your programs into meaningful functions. Be defensive
when dealing with user input. Exit gracefully and if an error has been encountered &#8211; IO failed
&#8211; inform the user in a meaningul but not verbose way &#8211; remember the flip side: silence is
goldern.
<!--l. 22--><p class="noindent" ><span 
class="cmbx-10">Defensive coding: </span>you should always assume that the user will enter incorrect input. So how are you
going to deal with it? Tips: make sure you check the number of parameters entered against what you
expect and their correctness.
<!--l. 24--><p class="noindent" ><span 
class="cmbx-10">Modular code: </span>beakdown your code in to meaningful functions, e.g., convertAddress(). Make it more
reabale. Reusable, easier to test and debug.
<!--l. 26--><p class="noindent" ><span 
class="cmbx-10">Exit gracefully: </span>clean up and inform the user, assert conditions.
<!--l. 28--><p class="noindent" >There is the detailed rubric:
<!--l. 30--><p class="noindent" ><span 
class="cmbx-10">Correctness 70%</span>
<!--l. 32--><p class="noindent" >&#8211; Is the program correct (i.e., does it work) and error free?
<!--l. 34--><p class="noindent" >WARNING: DO NOT SUBMIT SEGFAULTED CODE:
<!--l. 36--><p class="noindent" >In all cases below there is no grade given for a program that segfaults. A student will be asked to
resubmit their segfaulted code. The resubmitted code will be graded out of 50% of the original
grade. This is a significant penalty so make sure that you double check that your code compiles
correctly and runs correctly without segfaults. Make your code is defensive to incorrect user
input.
<!--l. 38--><p class="noindent" >1. echo 17.5%
<!--l. 40--><p class="noindent" >&#8211; cannot do the -n switch. -5%
<!--l. 42--><p class="noindent" >&#8211; edge cases (e.g., does not work when have space in the string, no text). -2.5%
<!--l. 44--><p class="noindent" >2. network 17.5%
<!--l. 46--><p class="noindent" >&#8211; does not work in either mode (not simple bitwise operation errors here, i.e., too much errors in a specific
mode). -7.5% for one. -15% for both.
<!--l. 48--><p class="noindent" >&#8211; does not pass input check in interactive mode(long ip address). -3%.
<!--l. 50--><p class="noindent" >&#8211; Logic error. e.g., cannot get right conversion from prefix to mask. etc. -4%.
<!--l. 52--><p class="noindent" >&#8211; Input check in commands.(cannot handle well dealing with other characters) -2%.
                                                                                  
                                                                                  
<!--l. 54--><p class="noindent" >3. sort 17.5%
<!--l. 56--><p class="noindent" >&#8211; incorrect numerical sort -3%
<!--l. 58--><p class="noindent" >&#8211; incorrect lexicographical sort -3%
<!--l. 60--><p class="noindent" >&#8211; incorrect unique sort -3%
<!--l. 62--><p class="noindent" >&#8211; incorrect reserve sort -3%
<!--l. 64--><p class="noindent" >&#8211; wrong order for each of the four modes -3%
<!--l. 66--><p class="noindent" >&#8211; input checking (wrong switch, valid file) -2.5%
<!--l. 68--><p class="noindent" >4. rps 17.5%
<!--l. 70--><p class="noindent" >&#8211; algorithm errors (e.g., error in stats, error in judge) -5%
<!--l. 72--><p class="noindent" >&#8211; system errors (does the state machine work correctly) -5%
<!--l. 74--><p class="noindent" >&#8211; no file decomposition (no head files or all-in-one) -(10,20)%
<!--l. 76--><p class="noindent" >&#8211; weak handling on incorrect inputs(undefined or long inputs) -5%
<!--l. 78--><p class="noindent" ><span 
class="cmbx-10">Clarity (1-10) 10%</span>
<!--l. 80--><p class="noindent" >&#8211; Is the code easy to read, well commented, use good names
<!--l. 82--><p class="noindent" >&#8211; for variables and functions. In essence, is it easy to understand and use
<!--l. 84--><p class="noindent" >&#8211; [K&amp;P] Clarity makes sure that the code is easy to understand for people and machines.
<!--l. 86--><p class="noindent" >&#8211; Too much mysterious variable names with comments -5%
<!--l. 88--><p class="noindent" ><span 
class="cmbx-10">Simplicity (1-10) 10%</span>
<!--l. 90--><p class="noindent" >&#8211; Is the code as simple as possible.&#8211; [K&amp;P] Simplicity keeps the program short and managable
 
</body></html> 

                                                                                  


