http://www.cs.dartmouth.edu/%7Ecampbell/cs60/lab7.html
3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="lab7.tex"> 
<meta name="date" content="2012-05-10 16:12:00"> 
<link rel="stylesheet" type="text/css" href="lab7.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 60 Computer Networks</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lab7</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>DartNet: Simple Network Protocol (SNP) Implementation - Putting it all together!</h1>
<!--l. 19--><p class="noindent" >We have completed the Simple Reliable Transport (SRT) and the Overlay Network (ON) implementation.
Now we will move on the the network layer in DartNet and design and implement its Simple Network
Protocol (SNP). The SNP layer connects the SRT layer and the ON layer in the stack. After this lab, you
will have the completed the implementation of the DartNet stack. To test your DartNet stack you will run
the stress test application between nodes as in Lab5 but this time it will excerise all the layers you have
coded.
<!--l. 21--><p class="noindent" >This culminating lab puts it all together: your reliable transport sets up connections and gurantees
delivery of data segments in the face of packet loss and bit courruption, your network protocols routes and
forwards network packets (datagrams) between nodes in your overlay.
<!--l. 23--><p class="noindent" >This is a challenging lab because it pulls are the pieces together both in terms of the concepts taught
in class (applications, transport and network layers) and as a culminating lab for DartNet.
<span 
class="cmbx-10">Note, that you should use your own DartNet component code (i.e., SRT, ON) and</span>
<span 
class="cmbx-10">not any of the code returned as part of the solutions (i.e., the code we return to</span>
<span 
class="cmbx-10">you as solution and not the code given out as part of the labs) handed out. If</span>
<span 
class="cmbx-10">you do use any solution code (other than the checksum) in this lab then your</span>
<span 
class="cmbx-10">lab will be graded out of 70%</span>. The idea is to get you to use your own code for this final
lab.
<!--l. 29--><p class="noindent" >Completing this series of labs really brings home the core set of mechanisms (in a watered down sense)
used in Internet everyday, reinforcing the knowledge learnt in class through implementation
skills.
<!--l. 31--><p class="noindent" ><span 
class="cmbx-10">Your DartNet Demo: You should set a time up with the TA to demo your DartNet code</span>
<span 
class="cmbx-10">running. Note, we will not give a grade for this lab unless you have demoed your Lab7 to</span>
<span 
class="cmbx-10">the TA. Please set a time up with the TA once you have sumbmitted your code. You will</span>
<span 
class="cmbx-10">have to demo within 48 hours of submitting the code</span>.
<!--l. 34--><p class="noindent" ><span 
class="cmbx-10">Before you read another line of this programming assignment please read or re-read the</span>
<span 
class="cmbx-10">Lecture notes on </span><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/snp.html" > <span 
class="cmbx-10">Simple Network Protocol </span></a><span 
class="cmbx-10">. The description in this assignment is fairly</span>
<span 
class="cmbx-10">brief and the context for understanding it is found in the design notes.</span><br 
class="newline" />
                                                                                  
                                                                                  
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Getting Started - Some Background Notes</h3>
<!--l. 38--><p class="noindent" >The SNP layer is implemented as a process. Each node in the overlay network will have an SNP process
running. The SNP process maintains a TCP connection to the ON process and a TCP connection to the
SRT process. The SNP process provides APIs to the SRT process to send segments to destination nodes in
the overlay network. The SNP process uses the SNP routing algorithm/protocol (SNP is made up of a
routing algorithm and forwarding mechanism all implemented in SNP as a protocol and forwarding
mechanism, respectively) to construct the routing table. The SNP process encapsulates received segments
sent by the SRT process into SNP packets (one SRT segment in each SNP packet - no fragmentation here)
and uses the ON APIs to forward SNP packets to &#8220;next hop nodes&#8221; toward the destination
node. The <a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/snp.html" > design notes </a>design provide lots of details on the construction of SNP and its
relation to the other DartNet layers; in addition, detailed examples of the routing algorithms is
given.
<!--l. 40--><p class="noindent" >In the lab you need to first implement all the data structures used by the SNP routing protocol, which are:
the neighbor cost table, distance vector table and routing table. You then need to implement the SNP
routing algorithm as part of the SNP process. Again, we described SNP routing algorithm (which is the
Distance Vector Algorithm) in detail in the design notes, please read them before you start. <span 
class="cmbx-10">The</span>
<span 
class="cmbx-10">Distance Vector algorithm is also described in the course book in the Section 4.5.2 - so read</span>
<span 
class="cmbx-10">that first</span>.
<!--l. 42--><p class="noindent" >Finally, You need to implement the SNP forwarding mechanism/function. After all these SNP
components are implemented, you need to implement the SNP APIs so that your SRT process
can use these APIs to send and receive packets over the network. Once you have done that
you have completed the DartNet stack - but to prove that your code base works you have to
sucessfully run the stress test application between two nodes on your overlay. Then you are
done!
<!--l. 44--><p class="noindent" >However, before you read another line of this programming assignment please read or re-read the Lecture
notes on <a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/snp.html" > Simple Network Protocol Design </a>. The description in this assignment is fairly brief and the
context for understanding it is found in the design notes.<br 
class="newline" />
<!--l. 47--><p class="noindent" >While quite a lot of information is given on APIs, data structures, algorithms/mechanisms, you will need
to think about how to implement these required components in some detail. To some degree you need to
hold the complete design of the application, transport, network and overlay in your mind before writing a
line of code. If you do that then the coding phase will fall out nicely. If you don&#8217;t conceptual problems may
bite you!
<!--l. 49--><p class="noindent" >So read, study, think, abtract, then code. Don&#8217;t code, ..... study, read. That would be perhaps more
expedient initially but a risky strategy. This is a difficult one so - think first before engaging the
compiler.
<!--l. 52--><p class="noindent" >Good luck!
<!--l. 54--><p class="noindent" ><span 
class="cmbx-10">Submitting assignment</span>: SVN, as usual.
<!--l. 57--><p class="noindent" >Change to your labs directory <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cd</span><span 
class="cmtt-10">&#x00A0;~/cs60/labs</span></span></span> This directory contains your lab6 directory where your
solutions are found.
<!--l. 59--><p class="noindent" >Please make sure that the lab7 directory contains a simple text file, named README, describing anything
                                                                                  
                                                                                  
&#8220;unusual&#8221; about how your solutions should be located, executed, and considered; and a Makefile to build
the source.
<!--l. 61--><p class="noindent" >Your lab7 should have the following structure and files.
<!--l. 63--><p class="noindent" >[atc@dhcp-212-223 lab7] ls * <br 
class="newline" />Makefile ReadMe<br 
class="newline" />
<!--l. 66--><p class="noindent" >common:<br 
class="newline" />constants.h pkt.c pkt.h seg.c seg.h<br 
class="newline" />
<!--l. 69--><p class="noindent" >topology:<br 
class="newline" />topology.c topology.h topology.dat <br 
class="newline" />
<!--l. 72--><p class="noindent" >overlay:<br 
class="newline" />neighbortable.c neighbortable.h overlay.c overlay.h<br 
class="newline" />
<!--l. 75--><p class="noindent" >network:<br 
class="newline" />network.c network.h nbrcosttable.c nbrcosttable.h dvtable.c dvtable.h routingtable.c routingtable.h
<!--l. 78--><p class="noindent" >client:<br 
class="newline" />app_simple_client.c app_stress_client.c srt_client.c srt_client.h send_this_text.txt
<!--l. 81--><p class="noindent" >server:<br 
class="newline" />app_simple_server.c app_stress_server.c srt_server.c srt_server.h
<!--l. 84--><p class="noindent" >OK, let&#8217;s get going
<!--l. 86--><p class="noindent" >____________________________________________________________________________
<!--l. 88--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>Important source and header files - read them </h3>
<!--l. 90--><p class="noindent" >OK, now you have read the overlay network design notes, look at these important files - browse them for
now, we will get back to them.
<!--l. 94--><p class="noindent" ><span 
class="cmbx-10">Note, all the files listed below needed for this lab can be found in this tarball file: </span><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout.tar.gz" >
<span 
class="cmbx-10">lab7handout.tar.gz </span></a><span 
class="cmbx-10">. Save this and work from this tarball for your assignment</span>.
<!--l. 96--><p class="noindent" >ReadMe and Makefile
<!--l. 98--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/Readme" > Readme</a><br 
class="newline" />
<!--l. 100--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/Makefile" > Makefile</a><br 
class="newline" />
                                                                                  
                                                                                  
<!--l. 102--><p class="noindent" >Simple application client and server code:
<!--l. 104--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/client/app_simple_client.c" > app_simple_client.c</a><br 
class="newline" />
<!--l. 106--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/server/app_simple_server.c" > app_simple_server.c</a><br 
class="newline" />
<!--l. 108--><p class="noindent" >Stress test application client and server code:
<!--l. 110--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/client/app_stress_client.c" > app_stress_client.c </a><br 
class="newline" />
<!--l. 112--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/server/app_stress_server.c" > app_stress_server.c </a><br 
class="newline" />
<!--l. 114--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/client/send_this_text.txt" > send_this_text.txt</a><br 
class="newline" />
<!--l. 116--><p class="noindent" >SRT Client implementation code:
<!--l. 118--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/client/srt_client.h" > srt_client.h </a><br 
class="newline" />
<!--l. 120--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/client/srt_client.c" > srt_client.c </a><br 
class="newline" />
<!--l. 122--><p class="noindent" >SRT Server implementation code:
<!--l. 124--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/server/srt_server.h" > srt_server.h </a><br 
class="newline" />
<!--l. 126--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/server/srt_server.c" > srt_server.c </a><br 
class="newline" />
<!--l. 128--><p class="noindent" >SNP layer data structures and prototypes needed to implement for the SNP protocol:
<!--l. 130--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/network.h" > network.h</a><br 
class="newline" />
<!--l. 132--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/network.c" > network.c</a><br 
class="newline" />
<!--l. 134--><p class="noindent" >Neighbor cost table data structures and prototypes needed to implement:
<!--l. 136--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/nbrcosttable.h" > nbrcosttable.h</a><br 
class="newline" />
<!--l. 138--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/nbrcosttable.c" > nbrcosttable.c</a><br 
class="newline" />
<!--l. 140--><p class="noindent" >Distance vector table data structures and prototypes needed to implement:
<!--l. 142--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/dvtable.h" > dvtable.h</a><br 
class="newline" />
                                                                                  
                                                                                  
<!--l. 144--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/dvtable.c" > dvtable.c</a><br 
class="newline" />
<!--l. 146--><p class="noindent" >Routing table data structures and prototypes needed to implement:
<!--l. 148--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/network/routingtable.h" > routingtable.h</a><br 
class="newline" />
<!--l. 150--><p class="noindent" >Overlay directory: overlay.h defines the functions used by overlay. You need to implement these functions
in overlay.c
<!--l. 152--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/overlay/overlay.h" > overlay.h</a><br 
class="newline" />
<!--l. 154--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60//lab7handout/overlay/overlay.c" > overlay.c</a><br 
class="newline" />
<!--l. 156--><p class="noindent" >Overlay directory: neighbortable.h defines the neighbor table data structure and APIs you need to
implement. You need to write your neighbortable.c to implement these APIs.
<!--l. 158--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/overlay/neighbortable.h" > neighbortable.h</a><br 
class="newline" />
<!--l. 160--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/overlay/neighbortable.c" > neighbortable.c</a><br 
class="newline" />
<!--l. 162--><p class="noindent" >Common directory: pkt.h defines the packet format for the packet APIs you need to implement. You need
to write your pkt.c file to implement these APIs.
<!--l. 164--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/common/pkt.h" > pkt.h</a>. <br 
class="newline" />
<!--l. 166--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60//lab7handout/common/pkt.c" > pkt.c</a><br 
class="newline" />
<!--l. 168--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/common/seg.h" > seg.h</a><br 
class="newline" />
<!--l. 170--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/common/seg.c" > seg. c</a><br 
class="newline" />
<!--l. 172--><p class="noindent" >constants - we increase the SRT timeout values because the packet processing delay is incrased with the
full DartNet stack:
<!--l. 174--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/common/constants.h" > constants.h</a><br 
class="newline" />
<!--l. 176--><p class="noindent" >Topology files:
<!--l. 179--><p class="noindent" ><span 
class="cmbx-10">Note, please update the topology.dat to run your overlay on any machines you wish e.g.,</span>
<span 
class="cmbx-10">green.cs.dartmouth.edu. Please put the names of the overlay nodes in the file and not</span>
<span 
class="cmbx-10">explicit IP addresses</span>.
<!--l. 181--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/topology/topology.dat" > topology.dat</a><br 
class="newline" />
                                                                                  
                                                                                  
<!--l. 183--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/topology/topology.h" > topology.h</a><br 
class="newline" />
<!--l. 185--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs60/lab7handout/topology/topology.c" > topology.c</a><br 
class="newline" />
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">Currently,</span><span 
class="cmtt-10">&#x00A0;there</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;defined</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;constants.h:</span><br /><br /><span 
class="cmtt-10">CONNECTION_PORT</span><br /><span 
class="cmtt-10">OVERLAY_PORT</span><span 
class="cmtt-10">&#x00A0;NETWORK_PORT</span><br /><br /><span 
class="cmtt-10">\textbf{Important,</span><span 
class="cmtt-10">&#x00A0;please</span><span 
class="cmtt-10">&#x00A0;assign</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;random</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;them.</span><span 
class="cmtt-10">&#x00A0;You</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;random</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;2000</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;5000.</span><span 
class="cmtt-10">&#x00A0;Do</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;Well</span><span 
class="cmtt-10">&#x00A0;Known</span><span 
class="cmtt-10">&#x00A0;Ports</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;0</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;1023}.</span><br /><br /><span 
class="cmtt-10">If</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;run</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;with</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;default</span><span 
class="cmtt-10">&#x00A0;settings</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;ports</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;constants.h,</span><br /><span 
class="cmtt-10">you</span><span 
class="cmtt-10">&#x00A0;will</span><span 
class="cmtt-10">&#x00A0;run</span><span 
class="cmtt-10">&#x00A0;into</span><span 
class="cmtt-10">&#x00A0;situations</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;being</span><span 
class="cmtt-10">&#x00A0;already</span><span 
class="cmtt-10">&#x00A0;allocated</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;classmate.</span><br /><span 
class="cmtt-10">So</span><span 
class="cmtt-10">&#x00A0;set</span><span 
class="cmtt-10">&#x00A0;your</span><span 
class="cmtt-10">&#x00A0;own</span><span 
class="cmtt-10">&#x00A0;values</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;minimize</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;likelihood</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;happening.</span><br /><br /></div></div>
<!--l. 207--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Neighbor Cost Table Functions</h3>
<!--l. 208--><p class="noindent" >The Neighbor cost table function prototypes are defined in nbrcosttable.h. You need to implement these
function prototypes in nbrcosttable.c.
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//nbrcosttable_create()</span><span 
class="cmtt-10">&#x00A0;creates</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;neighbor</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;dynamically</span><br /><span 
class="cmtt-10">//and</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;with</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;its</span><span 
class="cmtt-10">&#x00A0;neighbors&#8217;</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;IDs</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;costs.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;neighbors&#8217;</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;IDs</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;costs</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;retrieved</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;topology.dat</span><span 
class="cmtt-10">&#x00A0;file.</span><br /><br /><span 
class="cmtt-10">nbr_cost_entry_t*</span><span 
class="cmtt-10">&#x00A0;nbrcosttable_create();</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//nbrcosttable_destroy()</span><span 
class="cmtt-10">&#x00A0;destroys</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;neighbor</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;frees</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;allocated</span><span 
class="cmtt-10">&#x00A0;memory</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;neighbor</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;nbrcosttable_destroy(nbr_cost_entry_t*</span><span 
class="cmtt-10">&#x00A0;nct);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//nbrcosttable_getcost()</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;used</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;get</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;neighbor.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;neighboring</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//INFINITE_COST</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><br /><span 
class="cmtt-10">unsigned</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;nbrcosttable_getcost(nbr_cost_entry_t*</span><span 
class="cmtt-10">&#x00A0;nct,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;nodeID);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//nbrcosttable_print()</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;neighbor</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;nbrcosttable_print(nbr_cost_entry_t*</span><span 
class="cmtt-10">&#x00A0;nct);</span><br /><br /></div></div>
<!--l. 269--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Distance Vector Table Functions</h3>
<!--l. 270--><p class="noindent" >The distance vector table function prototypes are defined in dvtable.h. You need to implement
these function prototypes in dvtable.c. Read the design notes and the course book section on
distance vector for more context. This is a hard part of the lab - the more knowledge the
better.
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><span 
class="cmtt-10">//dvtable_create()</span><span 
class="cmtt-10">&#x00A0;creates</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;dvtable(distance</span><span 
class="cmtt-10">&#x00A0;vector</span><span 
class="cmtt-10">&#x00A0;table)</span><span 
class="cmtt-10">&#x00A0;dynamically.</span><br /><span 
class="cmtt-10">//A</span><span 
class="cmtt-10">&#x00A0;distance</span><span 
class="cmtt-10">&#x00A0;vector</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;n+1</span><span 
class="cmtt-10">&#x00A0;entries,</span><span 
class="cmtt-10">&#x00A0;where</span><span 
class="cmtt-10">&#x00A0;n</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;neighbors</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node,</span><br /><span 
class="cmtt-10">//and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;rest</span><span 
class="cmtt-10">&#x00A0;one</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;itself.</span><br /><span 
class="cmtt-10">//Each</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;distance</span><span 
class="cmtt-10">&#x00A0;vector</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;dv_t</span><span 
class="cmtt-10">&#x00A0;structure</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;source</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array</span><br /><span 
class="cmtt-10">//of</span><span 
class="cmtt-10">&#x00A0;N</span><span 
class="cmtt-10">&#x00A0;dv_entry_t</span><span 
class="cmtt-10">&#x00A0;structures</span><span 
class="cmtt-10">&#x00A0;where</span><span 
class="cmtt-10">&#x00A0;N</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;nodes</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;overlay.</span><br /><span 
class="cmtt-10">//Each</span><span 
class="cmtt-10">&#x00A0;dv_entry_t</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destimated</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;source</span><span 
class="cmtt-10">&#x00A0;node</span><br /><span 
class="cmtt-10">//to</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;dvtable</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;initialized</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;too.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;costs</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;its</span><span 
class="cmtt-10">&#x00A0;neighbors</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;initialized</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;retrieved</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;topology.dat.</span><br /><span 
class="cmtt-10">//Other</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;costs</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;initialized</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;INFINITE_COST.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;created</span><span 
class="cmtt-10">&#x00A0;dvtable</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;returned.</span><br /><br /><span 
class="cmtt-10">dv_t*</span><span 
class="cmtt-10">&#x00A0;dvtable_create();</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><span 
class="cmtt-10">//dvtable_destroy()</span><span 
class="cmtt-10">&#x00A0;destroys</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;dvtable.</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;frees</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;allocated</span><span 
class="cmtt-10">&#x00A0;memory</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dvtable.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;dvtable_destroy(dv_t*</span><span 
class="cmtt-10">&#x00A0;dvtable);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><span 
class="cmtt-10">//dvtable_setcost()</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;nodes</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;dvtable.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;those</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;nodes</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;set,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;1.</span><br /><span 
class="cmtt-10">//Otherwise,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;dvtable_setcost(dv_t*</span><span 
class="cmtt-10">&#x00A0;dvtable,int</span><span 
class="cmtt-10">&#x00A0;fromNodeID,int</span><span 
class="cmtt-10">&#x00A0;toNodeID,</span><span 
class="cmtt-10">&#x00A0;unsigned</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cost);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//dvtable_getcost()</span><span 
class="cmtt-10">&#x00A0;returns</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;nodes</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;dvtable</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;those</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;nodes</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;dvtable,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;link</span><span 
class="cmtt-10">&#x00A0;cost.</span><br /><span 
class="cmtt-10">//otherwise,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;INFINITE_COST.</span><br /><br /><span 
class="cmtt-10">unsigned</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;dvtable_getcost(dv_t*</span><span 
class="cmtt-10">&#x00A0;dvtable,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;fromNodeID,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;toNodeID);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><span 
class="cmtt-10">//dvtable_print()</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;dvtable.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;dvtable_print(dv_t*</span><span 
class="cmtt-10">&#x00A0;dvtable);</span><br /><br /></div></div>
<!--l. 349--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Routing Table Functions</h3>
                                                                                  
                                                                                  
<!--l. 350--><p class="noindent" >The routing table function prototypes are defined in routingtable.h. You need to implement these function
prototypes in routingtable.c.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//makehash()</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;used</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;takes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;key</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;as</span><span 
class="cmtt-10">&#x00A0;input,</span><br /><span 
class="cmtt-10">//and</span><span 
class="cmtt-10">&#x00A0;returns</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;slot</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID.</span><br /><br /><span 
class="cmtt-10">//You</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;copy</span><span 
class="cmtt-10">&#x00A0;makehash()</span><span 
class="cmtt-10">&#x00A0;implementation</span><span 
class="cmtt-10">&#x00A0;below</span><span 
class="cmtt-10">&#x00A0;directly</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;routingtable.c:</span><br /><span 
class="cmtt-10">//int</span><span 
class="cmtt-10">&#x00A0;makehash(int</span><span 
class="cmtt-10">&#x00A0;node)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">//        return</span><span 
class="cmtt-10">&#x00A0;node%MAX_ROUTINGTABLE_ENTRIES;</span><br /><span 
class="cmtt-10">//}</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;makehash(int</span><span 
class="cmtt-10">&#x00A0;node);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//routingtable_create()</span><span 
class="cmtt-10">&#x00A0;creates</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;dynamically.</span><br /><span 
class="cmtt-10">//All</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;entries</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;initialized</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;pointers.</span><br /><span 
class="cmtt-10">//Then</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;neighbors</span><span 
class="cmtt-10">&#x00A0;with</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;direct</span><span 
class="cmtt-10">&#x00A0;link,</span><span 
class="cmtt-10">&#x00A0;create</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;neighbor</span><br /><span 
class="cmtt-10">//itself</span><span 
class="cmtt-10">&#x00A0;as</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;hop</span><span 
class="cmtt-10">&#x00A0;node,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;insert</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;into</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;created</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;structure</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;returned.</span><br /><br /><span 
class="cmtt-10">routingtable_t*</span><span 
class="cmtt-10">&#x00A0;routingtable_create();</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//routingtable_destroy()</span><span 
class="cmtt-10">&#x00A0;destroys</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//All</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;allocated</span><span 
class="cmtt-10">&#x00A0;data</span><span 
class="cmtt-10">&#x00A0;structures</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;freed.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;routingtable_destroy(routingtable_t*</span><span 
class="cmtt-10">&#x00A0;routingtable);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//routingtable_setnextnode()</span><span 
class="cmtt-10">&#x00A0;updates</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;given</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;hop&#8217;s</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;given</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;already</span><span 
class="cmtt-10">&#x00A0;exists,</span><span 
class="cmtt-10">&#x00A0;update</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;existing</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;given</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;there,</span><span 
class="cmtt-10">&#x00A0;add</span><span 
class="cmtt-10">&#x00A0;one</span><span 
class="cmtt-10">&#x00A0;with</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;given</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID.</span><br /><span 
class="cmtt-10">//Each</span><span 
class="cmtt-10">&#x00A0;slot</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;linked</span><span 
class="cmtt-10">&#x00A0;list</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entries</span><span 
class="cmtt-10">&#x00A0;due</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;conflicting</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;keys</span><br /><span 
class="cmtt-10">//(differnt</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;keys</span><span 
class="cmtt-10">&#x00A0;(destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;here)</span><span 
class="cmtt-10">&#x00A0;may</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;values</span><span 
class="cmtt-10">&#x00A0;(slot</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;here)).</span><br /><span 
class="cmtt-10">//To</span><span 
class="cmtt-10">&#x00A0;add</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;table:</span><br /><span 
class="cmtt-10">//First</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;makehash()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;get</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;slot</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;should</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;stored.</span><br /><span 
class="cmtt-10">//Then</span><span 
class="cmtt-10">&#x00A0;append</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;linked</span><span 
class="cmtt-10">&#x00A0;list</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;that</span><span 
class="cmtt-10">&#x00A0;slot.</span><br /><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;routingtable_setnextnode(routingtable_t*</span><span 
class="cmtt-10">&#x00A0;routingtable,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;destNodeID,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;nextNodeID);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//routingtable_getnextnode()</span><span 
class="cmtt-10">&#x00A0;looks</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destNodeID</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//Since</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;table,</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;operation</span><span 
class="cmtt-10">&#x00A0;has</span><span 
class="cmtt-10">&#x00A0;O(1)</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;complexity.</span><br /><span 
class="cmtt-10">//To</span><span 
class="cmtt-10">&#x00A0;find</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;should</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;makehash()</span><br /><span 
class="cmtt-10">//to</span><span 
class="cmtt-10">&#x00A0;get</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;slot</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;go</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;linked</span><span 
class="cmtt-10">&#x00A0;list</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;that</span><span 
class="cmtt-10">&#x00A0;slot</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;search</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;entry.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destNodeID</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;found,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;nextNodeID</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destNodeID</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;found,</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;routingtable_getnextnode(routingtable_t*</span><span 
class="cmtt-10">&#x00A0;routingtable,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;destNodeID);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//routingtable_print()</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;routingtable_print(routingtable_t*</span><span 
class="cmtt-10">&#x00A0;routingtable);</span><br /><br /></div></div>
<!--l. 455--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>The SNP Functions</h3>
<!--l. 456--><p class="noindent" >The SNP process uses the following functions. They are defined in network.h and should be implemented
in network.c.
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//connectToOverlay()</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;used</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;connect</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;local</span><span 
class="cmtt-10">&#x00A0;ON</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;on</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;OVERLAY_PORT.</span><br /><span 
class="cmtt-10">//TCP</span><span 
class="cmtt-10">&#x00A0;descriptor</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;success,</span><span 
class="cmtt-10">&#x00A0;otherwise</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;connectToOverlay();</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;routeupdate_daemon</span><span 
class="cmtt-10">&#x00A0;thread</span><span 
class="cmtt-10">&#x00A0;sends</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;route</span><span 
class="cmtt-10">&#x00A0;update</span><span 
class="cmtt-10">&#x00A0;packets</span><span 
class="cmtt-10">&#x00A0;every</span><span 
class="cmtt-10">&#x00A0;ROUTEUPDATE_INTERVAL.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;route</span><span 
class="cmtt-10">&#x00A0;update</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node&#8217;s</span><span 
class="cmtt-10">&#x00A0;distance</span><span 
class="cmtt-10">&#x00A0;vector.</span><br /><span 
class="cmtt-10">//Broadcasting</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;done</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;set</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dest_nodeID</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;header</span><span 
class="cmtt-10">&#x00A0;as</span><span 
class="cmtt-10">&#x00A0;BROADCAST_NODEID</span><br /><span 
class="cmtt-10">//and</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;overlay_sendpkt()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;send</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;BROADCAST_NODEID</span><span 
class="cmtt-10">&#x00A0;address.</span><br /><br /><span 
class="cmtt-10">void*</span><span 
class="cmtt-10">&#x00A0;routeupdate_daemon(void*</span><span 
class="cmtt-10">&#x00A0;arg);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;pkthandler</span><span 
class="cmtt-10">&#x00A0;thread</span><span 
class="cmtt-10">&#x00A0;handles</span><span 
class="cmtt-10">&#x00A0;incoming</span><span 
class="cmtt-10">&#x00A0;packets</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;ON</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;receives</span><span 
class="cmtt-10">&#x00A0;packets</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;ON</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;calling</span><span 
class="cmtt-10">&#x00A0;overlay_recvpkt().</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node,</span><span 
class="cmtt-10">&#x00A0;forward</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;not</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;node,</span><span 
class="cmtt-10">&#x00A0;forward</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;hop</span><br /><span 
class="cmtt-10">//according</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//If</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;packet</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;Route</span><span 
class="cmtt-10">&#x00A0;Update</span><span 
class="cmtt-10">&#x00A0;packet,</span><span 
class="cmtt-10">&#x00A0;update</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;distance</span><span 
class="cmtt-10">&#x00A0;vector</span><span 
class="cmtt-10">&#x00A0;table</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><br /><span 
class="cmtt-10">void*</span><span 
class="cmtt-10">&#x00A0;pkthandler(void*</span><span 
class="cmtt-10">&#x00A0;arg);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//network_stop()</span><span 
class="cmtt-10">&#x00A0;stops</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;closes</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;connections</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;frees</span><span 
class="cmtt-10">&#x00A0;all</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dynamically</span><span 
class="cmtt-10">&#x00A0;allocated</span><span 
class="cmtt-10">&#x00A0;memory.</span><br /><span 
class="cmtt-10">//It</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;called</span><span 
class="cmtt-10">&#x00A0;when</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;receives</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;signal</span><span 
class="cmtt-10">&#x00A0;SIGINT.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;network_stop();</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//waitTranport()</span><span 
class="cmtt-10">&#x00A0;opens</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;port</span><span 
class="cmtt-10">&#x00A0;on</span><span 
class="cmtt-10">&#x00A0;NETWORK_PORT</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;waits</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;TCP</span><span 
class="cmtt-10">&#x00A0;connection</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;local</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//After</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;local</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;connected,</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;keeps</span><span 
class="cmtt-10">&#x00A0;receiving</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_ts</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;contain</span><br /><span 
class="cmtt-10">//the</span><span 
class="cmtt-10">&#x00A0;segments</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;IDes</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process.</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;received</span><span 
class="cmtt-10">&#x00A0;segments</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;then</span><br /><span 
class="cmtt-10">//encapsulated</span><span 
class="cmtt-10">&#x00A0;into</span><span 
class="cmtt-10">&#x00A0;packets</span><span 
class="cmtt-10">&#x00A0;(one</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;one</span><span 
class="cmtt-10">&#x00A0;packet),</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;sent</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;hop</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;overlay_sendpkt.</span><br /><span 
class="cmtt-10">//The</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;hop</span><span 
class="cmtt-10">&#x00A0;nodeID</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;retrieved</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;routing</span><span 
class="cmtt-10">&#x00A0;table.</span><br /><span 
class="cmtt-10">//When</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;local</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;disconnected,</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;waits</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;connect.</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;waitTranport();</span><br /><br /></div></div>
<!--l. 540--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>The SNP APIs</h3>
<!--l. 541--><p class="noindent" >The SNP APIs are defined in seg.h and they should be implemented in seg.c. The seglost(), checksum()
and checkchecksum() functions are not listed. You can reuse your implementation of these function from
lab5.
<div 
class="colorbox" id="colorbox22"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;send</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;its</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><br /><span 
class="cmtt-10">//structure</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;send</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><span 
class="cmtt-10">//Parameter</span><span 
class="cmtt-10">&#x00A0;network_conn</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;TCP</span><span 
class="cmtt-10">&#x00A0;descriptor</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;connection</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Return</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;successfully</span><span 
class="cmtt-10">&#x00A0;sent,</span><span 
class="cmtt-10">&#x00A0;otherwise</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;snp_sendseg(int</span><span 
class="cmtt-10">&#x00A0;network_conn,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;dest_nodeID,</span><span 
class="cmtt-10">&#x00A0;seg_t*</span><span 
class="cmtt-10">&#x00A0;segPtr);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox23"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;receive</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;structure</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">//its</span><span 
class="cmtt-10">&#x00A0;src</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Parameter</span><span 
class="cmtt-10">&#x00A0;network_conn</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;TCP</span><span 
class="cmtt-10">&#x00A0;descriptor</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;connection</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//When</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;received,</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;seglost()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;determine</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;should</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;discarded</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;introduce</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;error</span><br /><span 
class="cmtt-10">//by</span><span 
class="cmtt-10">&#x00A0;flipping</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;bit.</span><span 
class="cmtt-10">&#x00A0;checkchecksum()</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;used</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;check</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;checksum.</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;as</span><span 
class="cmtt-10">&#x00A0;what</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;did</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;lab5.</span><br /><span 
class="cmtt-10">//Return</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;successfully</span><span 
class="cmtt-10">&#x00A0;received,</span><span 
class="cmtt-10">&#x00A0;otherwise</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;snp_recvseg(int</span><span 
class="cmtt-10">&#x00A0;network_conn,</span><span 
class="cmtt-10">&#x00A0;int*</span><span 
class="cmtt-10">&#x00A0;src_nodeID,</span><span 
class="cmtt-10">&#x00A0;seg_t*</span><span 
class="cmtt-10">&#x00A0;segPtr);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox24"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//SNP</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;receive</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;structure</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">//its</span><span 
class="cmtt-10">&#x00A0;destination</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Parameter</span><span 
class="cmtt-10">&#x00A0;tran_conn</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;TCP</span><span 
class="cmtt-10">&#x00A0;descriptor</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;connection</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Return</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;successfully</span><span 
class="cmtt-10">&#x00A0;received,</span><span 
class="cmtt-10">&#x00A0;otherwise</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;getsegToSend(int</span><span 
class="cmtt-10">&#x00A0;tran_conn,</span><span 
class="cmtt-10">&#x00A0;int*</span><span 
class="cmtt-10">&#x00A0;dest_nodeID,</span><span 
class="cmtt-10">&#x00A0;seg_t*</span><span 
class="cmtt-10">&#x00A0;segPtr);</span><br /><br /></div></div>
<div 
class="colorbox" id="colorbox25"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">//SNP</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;send</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;structure</span><span 
class="cmtt-10">&#x00A0;which</span><span 
class="cmtt-10">&#x00A0;contains</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;segment</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">//its</span><span 
class="cmtt-10">&#x00A0;src</span><span 
class="cmtt-10">&#x00A0;node</span><span 
class="cmtt-10">&#x00A0;ID</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Parameter</span><span 
class="cmtt-10">&#x00A0;tran_conn</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;TCP</span><span 
class="cmtt-10">&#x00A0;descriptor</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;connection</span><span 
class="cmtt-10">&#x00A0;between</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SRT</span><span 
class="cmtt-10">&#x00A0;process</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;SNP</span><span 
class="cmtt-10">&#x00A0;process.</span><br /><span 
class="cmtt-10">//Return</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;sendseg_arg_t</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;successfully</span><span 
class="cmtt-10">&#x00A0;sent,</span><span 
class="cmtt-10">&#x00A0;otherwise</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;-1.</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;forwardsegToSRT(int</span><span 
class="cmtt-10">&#x00A0;tran_conn,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;src_nodeID,</span><span 
class="cmtt-10">&#x00A0;seg_t*</span><span 
class="cmtt-10">&#x00A0;segPtr);</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


