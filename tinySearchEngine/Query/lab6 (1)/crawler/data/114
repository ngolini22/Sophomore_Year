http://www.cs.dartmouth.edu/%7Ecampbell/cs50/lab5.html
3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.tug.org/tex4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.tug.org/tex4ht/)"> 
<!-- html --> 
<meta name="src" content="lab5.tex"> 
<meta name="date" content="2015-05-11 15:24:00"> 
<link rel="stylesheet" type="text/css" href="lab5.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lab5</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>TinySearch Engine: Indexer Lab</h1>
<!--l. 19--><p class="noindent" >Lab5 is the second in a three part series of labs associated with building your very own search engine - the
TinySearch Engine, specifically designed for this Dartmouth course.
<!--l. 21--><p class="noindent" >We have coded the crawler and have the files in our TARGET_DIRECTORY and now we need to <span 
class="cmti-10">index</span>
them. Before you do another thing please read Section 4 on Indexing in <a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/searchingtheweb.pdf" >&#8220;Searching the Web&#8221;</a>, Arvind
Arasu, Junghoo Cho, Hector Garcia-Molina, Andreas Paepcke, Sriram Raghavan (Stanford University).
ACM Transactions on Internet Technology (TOIT), Volume 1 , Issue 1 (August 2001). It is important to
get a good understanding of what indexing is all about. It represents a critical part of the search engines
operation.
<!--l. 23--><p class="noindent" >Note, you will have to come up with the Design Spec and the Implementation Spec for the Indexer in
addition to coding, debugging and writing a bash shell to build, run and simply test it. We will discuss
some aspects of the design below including data structures and functions but you are free to come up with
your own design - which is a good excerise.
<!--l. 25--><p class="noindent" >This is a another challenging assignment. It includes data structures of link lists and hash tables and
functions. It certainly builds on Lab4. You will be able to reuse code - i.e.,. refactor your
code.
<!--l. 27--><p class="noindent" >This lab will cover many aspects of the C that you are becoming more familiar with: structures,
pointers, string processing, malloc/free, file operations and management. And, debugging
segfaults!
<!--l. 29--><p class="noindent" >This lab is different from the crawler since it runs as a standalone program and does not interact with
other distributed components such as the crawler did (e.g., wget). Each of the TinySearch
components (i.e., the crawler, indexer and query engine) are designed to run independently or
asynchronously.
<!--l. 32--><p class="noindent" >In the case of the indexer you will need to provide functional decomposition of the problem into multiple
source files. You will submit a make file to build the indexer. Also include a bash script that tests your
indexer program, as was the case with the crawler.
<!--l. 36--><p class="noindent" ><span 
class="cmbx-10">Grading: </span><a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/rubric5.html" > Grading rubric for lab</a>.
<!--l. 38--><p class="noindent" ><span 
class="cmbx-10">Submitting assignment using Subversion Versions System (SVN) - source code management</span>:
From now on you will use SVN to sign in your source tree.
                                                                                  
                                                                                  
<!--l. 40--><p class="noindent" >Change to your labs directory <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cd</span><span 
class="cmtt-10">&#x00A0;~/cs50/labs</span></span></span> This directory contains your lab5 directory where your
solutions are found.
<!--l. 42--><p class="noindent" >Please make sure that the labs5 directory contains a simple text file, named README, describing
anything &#8220;unusual&#8221; about how your solutions should be located, executed, and considered.
<!--l. 44--><p class="noindent" >Now, submit your work to your svn directory lab6 of your own repository. You should provide the
necessary files as discussed above. You need to sign in the complete source tree to svn.
<!--l. 46--><p class="noindent" >We will sign it out. You should sign in the final snapshot by the deadline.
<!--l. 48--><p class="noindent" ><span 
class="cmbx-10">Coding style</span>: Please put comments in your programs to help increase its understanding. Include a
header in each C file including the file name; brief description of the program; inputs; and outputs. It
is important you write C programs <span 
class="cmbx-10">defensively</span>; that is, you need to check the program&#8217;s
input and provide appropriate warning or error messages back to the user in terms of the
program usage. If you call functions from your code make sure you check the return status
(if available) and print out meaningful error messages and take suitable action. See testing
below.
<!--l. 50--><p class="noindent" ><span 
class="cmbx-10">Makefile</span>. Your directory will include a Makefile that will be used to do a build of your system. As part of
grading your lab we will do a build using your makefile. In fact your bash shell should first issue a make
clean and then make indexer before testing the new indexer. There should be no warnings from the
compiler nor segfaults when the code runs!
<!--l. 54--><p class="noindent" ><span 
class="cmbx-10">Writing a bash test script to automatically test your indexer program</span>. You will also be asked to
write a test shell that calls you indexer program. Note, we expect that the test script and the log file from
the tests will be included in your tarball. Call the test script <span 
class="cmti-10">indexer</span><span 
class="cmti-10">_test.sh </span>and the log of what the test
prints out should be directed to a file called <span 
class="cmti-10">indexer</span><span 
class="cmti-10">_testlog.&#8216;date&#8216; </span>(i.e., crawler_testlog.Wed Jan
30 02:17:20 EST 2008). Again, these two files must be included in your tarball. As part of
your grade we will run you script against your code and look the new log produced. Please
make sure that your test script writes out the name of the test, expected results and what the
systems outputs. Take a look at the test script returned as part of lab4 for a good example.
Remember that the script should issue <span 
class="cmbx-10">make clean </span>and <span 
class="cmbx-10">make indexer </span>commands, as discussed
above.
<!--l. 58--><p class="noindent" ><span 
class="cmbx-10">Test the indexer after running crawler at depth 3</span>. Please note that the indexer should be tested
after running the crawler at depth 3. This will create a large number of files (approx 700 files) that will be
indexed.
<!--l. 60--><p class="noindent" ><span 
class="cmbx-10">We will not grade labs that segfault</span>. You would not buy a product that crashed. So please do not
submit a lab that has segfaults. We will not grade it. You will have to fix the segfaults and resubmit
the lab. There will be penalties. This is in fairness to students that submited labs without
segfaults.
<!--l. 62--><p class="noindent" >____________________________________________________________________________
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Refactoring your Crawler</h3>
<!--l. 66--><p class="noindent" >You need to refactor your crawler code so that it has a good decomposition. There are a number of file,
list, hash, dictionary functions that can be reused by the indexer and the query engine. Because we do not
                                                                                  
                                                                                  
do an overall design for the complete TinySearch up front in the course these common utilities are
not apparent to you when you design and code the crawler in isolation from the complete
system.
<!--l. 70--><p class="noindent" >Please read the README included in the solution to lab4 that was mailed to you before starting to code
the indexer.
<!--l. 73--><p class="noindent" >What is refactoring?
<!--l. 75--><p class="noindent" >&#8220;Code refactoring is the process of changing a computer program&#8217;s internal structure without modifying
its external functional behavior or existing functionality, in order to improve internal quality attributes of
the software. Reasons include to improve code readability, to simplify code structure, to change code to
adhere to a given programming paradigm, to improve maintainability, to improve performance, or to
improve extensibility&#8221;
<!--l. 77--><p class="noindent" >Citation http://en.wikipedia.org/wiki/Code_refactoring
<!--l. 79--><p class="noindent" >OK. Read the README then proceed.
<!--l. 81--><p class="noindent" ><a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/README" >README</a>
<!--l. 83--><p class="noindent" >Once you have completed the crawler code refactoring you can add that as another skill to your expanding
sofware toolbox: i.e., refactored my code.
<!--l. 86--><p class="noindent" >OK. Onward in our TinySearch quest.
<!--l. 88--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>Indexer Requirements</h3>
<!--l. 90--><p class="noindent" >The indexer sub-system uses the files created by running your crawler to generate an inverted index
(called <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">index.dat</span></span></span>) containing the occurrences of words found in the files. The goal of the indexer
is to create an index containing identifiers to webpages where a certain word (e.g., fishing)
appears including the frequency of the word found in webpages. The identifiers represent the
names of the files (i.e., the progressive integer numbers used to name the files saved by the
crawler).
<!--l. 92--><p class="noindent" >The high level requirements of the indexer are as follows. The indexer SHALL (a term here that means
requirement) do the following for each file/document found in the TARGET_DIRECTORY
     <ul class="itemize1">
     <li class="itemize">load the document from the file system;
     </li>
     <li class="itemize">retrieve the unique document identifier;
     </li>
     <li class="itemize">parse the document discarding the HTML tags in order to count the occurrences of each word
     found in the document; and
                                                                                  
                                                                                  
     </li>
     <li class="itemize">store the word and its occurrence in the document in an <span 
class="cmti-10">inverted index </span>data structure so that
     the information can be easily retrieved.</li></ul>
<!--l. 100--><p class="noindent" >After all the documents have been processed, the indexer will save the information to a file. This
file will be used by the query engine which will be the last in the TinySearch sequence of
labs.
<!--l. 102--><p class="noindent" >The indexer has to be able to recreate a the index for the query engine to use in Lab6. Therefore, the
operation of the indexer is as follows:
     <ul class="itemize1">
     <li class="itemize">create the index from html file;
     </li>
     <li class="itemize">read the index out to a file to store, e.g., index.dat
     </li>
     <li class="itemize">read the index in from the file (i.e., index.dat in this case) and recreate the index (a copy
     new_index.dat); and
     </li>
     <li class="itemize">for testing purposes: write out the index to a different file (new_index.dat) and compare
     index.dat and new_index.dat. There should be no difference.</li></ul>
<!--l. 113--><p class="noindent" >Note, that the indexer has to create the index from the files (documents) and save it to a file (e.g.,
index.dat). But it also has to be able to &#8220;reload&#8221; the index data structure from the index,dat for the query
engine to use. So you must write the code to &#8220;reload&#8221;. We suggest that you write a simple bash script that
does the following because you need to test that a index can be written to a file and reloaded - and that it
is the same index. The way to do that is to create the index and write the index.dat. Then reload the
index and save it to another file new_index.dat. We will discuss the <span 
class="cmti-10">indexer</span><span 
class="cmti-10">_test.sh </span>at the end of this
note.
<!--l. 119--><p class="noindent" ><span 
class="cmbx-10">Extra Credit</span>. Another important requirement that we will check is that there are no memory
leaks. Your code should always free the structures it mallocs. We would imagine that many of
the crawlers submitted had memory leakes. We will talk this week about how to detect and
correct memory leaks in your code. In Lab5 we are giving extra credits for code that has
no memory leaks which is good coding practice. In Lab6 there will be penalties for memory
leaks!
<!--l. 122--><p class="noindent" >The TinySearch Engine architecture is shown in Figure 1. Observe the crawled webpages saved with
unique document ID as the file name. The indexer uses this document ID to build the inverted index and
parses the file for words and counts their occurrences which it stores in the data structures discussed in
the next section.
<!--l. 124--><p class="noindent" ><hr class="figure"><div class="figure" 
>
                                                                                  
                                                                                  
<a 
 id="x1-50011"></a>
                                                                                  
                                                                                  
<!--l. 125--><p class="noindent" ><img 
src="lab50x.png" alt="PIC" class="graphics" width="578.15999pt" height="483.11813pt" ><!--tex4ht:graphics  
name="lab50x.png" src="tinysearch.eps"  
-->
<br /> <div class="caption" 
><span class="id">Figure&#x00A0;1: </span><span  
class="content">Indexer: reads and parses the saved files and creates an inverted index before writing
out the data to a stored file.</span></div><!--tex4ht:label?: x1-50011 -->
                                                                                  
                                                                                  
<!--l. 128--><p class="noindent" ></div><hr class="endfigure">
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Command-line execution</h3>
<!--l. 133--><p class="noindent" >The index command takes the following input as default. Please see the section on the bash script for
automatically testing your code. That section describes an extension to the default command
line:
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">./indexer</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;[TARGET_DIRECTORY]</span><span 
class="cmtt-10">&#x00A0;[RESULTS</span><span 
class="cmtt-10">&#x00A0;FILE</span><span 
class="cmtt-10">&#x00A0;NAME]</span><br /><br /><span 
class="cmtt-10">Example</span><span 
class="cmtt-10">&#x00A0;command</span><span 
class="cmtt-10">&#x00A0;input:</span><br /><br /><span 
class="cmtt-10">./indexer</span><span 
class="cmtt-10">&#x00A0;../../data/</span><span 
class="cmtt-10">&#x00A0;index.dat</span><br /><br /><br /></div></div>
<!--l. 151--><p class="noindent" >From the above the command line we see that if there are 3 arguments it is the standard indexer that is
called. If there are 5 arguments (see below) it assumes we are testing the ability of indexer to reconstruct
the inverted index. Read on.
<!--l. 154--><p class="noindent" >To test that the indexer works we need to create the inverted index and then write it to a file (e.g.,
index.dat) as done in the above example command line; then, we need to recontruct the inverted index
from the stored file (e.g., index.dat) and then write it back to the target directory as a new file
(new_index.dat). Note, that we need to be able to read the index back from file because the query engine
component of TinySearch will need to do just that to reconstruct the inverted index so it can issue
queries against it. More on the query engine next week. So you will be writing a function
(e.g., called readFile(char *filename)) that can read in the index from the file (index.dat) and
reconstruct the data structures. As part of your test script you will need to &#8220;do a diff&#8221; between the
original index written to file (index.dat) and the read/rewritten one (new_index.dat). If they
are the same your code that stores the original index to file (index.dat) and the code that
reconstructs the index (viz. readFile(char *filename)) works. That will give you confidence that the
query engine can reconstruct the correct inverted index to operate on. This all makes good
sense.
<!--l. 158--><p class="noindent" >If you want your indexer to test this then the command line syntax is as follows:
<span 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">./indexer</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;[TARGET_DIRECTORY]</span><span 
class="cmtt-10">&#x00A0;[RESULTS</span><span 
class="cmtt-10">&#x00A0;FILENAME]</span><span 
class="cmtt-10">&#x00A0;[RESULTS</span><span 
class="cmtt-10">&#x00A0;FILENAME]</span><span 
class="cmtt-10">&#x00A0;[REWRITEN</span><span 
class="cmtt-10">&#x00A0;FILENAME]</span><br /><br /><span 
class="cmtt-10">Example</span><span 
class="cmtt-10">&#x00A0;command</span><span 
class="cmtt-10">&#x00A0;input:</span><br /><br /><span 
class="cmtt-10">./indexer</span><span 
class="cmtt-10">&#x00A0;../../data/</span><span 
class="cmtt-10">&#x00A0;index.dat</span><span 
class="cmtt-10">&#x00A0;index.dat</span><span 
class="cmtt-10">&#x00A0;new_index.dat</span><br /><br /></div></span>
<!--l. 176--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Data Structures</h3>
<!--l. 177--><p class="noindent" >A key design issue is the choice of data structures for storing the index. We need a data structure capable
of quickly retrieving the list of documents containing the words and their frequency.
<!--l. 179--><p class="noindent" >A good design represents a list of elements (defined as <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordList</span></span></span> composed of <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span>s) where each
element (<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span>) stores the information about a word and a list of the documents and the frequency of
the word found in the document. The list represents another linked list (defined as <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">DocumentList</span></span></span>) where
each element in the list (<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">DocumentNode</span></span></span>s) contains the document identifier and the number of occurrences
inside the document.
                                                                                  
                                                                                  
<!--l. 181--><p class="noindent" >The major data structures used by the indexer are as follows. (Note, that you are free design our own
structures - these are just for guidance).
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_DocumentNode</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_DocumentNode</span><span 
class="cmtt-10">&#x00A0;*next;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;pointer</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;member</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;list.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;document_id;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;document</span><span 
class="cmtt-10">&#x00A0;identifier</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;page_word_frequency;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;occurrences</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;word</span><br /><span 
class="cmtt-10">}</span><span 
class="cmtt-10">&#x00A0;__DocumentNode;</span><br /><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_DocumentNode</span><span 
class="cmtt-10">&#x00A0;DocumentNode;</span><br /><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_WordNode</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_WordNode</span><span 
class="cmtt-10">&#x00A0;*prev;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;pointer</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;previous</span><span 
class="cmtt-10">&#x00A0;word</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_WordNode</span><span 
class="cmtt-10">&#x00A0;*next;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;pointer</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;next</span><span 
class="cmtt-10">&#x00A0;word</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;word[WORD_LENGTH];</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;word</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;DocumentNode</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*page;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;pointer</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;list.</span><br /><span 
class="cmtt-10">}</span><span 
class="cmtt-10">&#x00A0;__WordNode;</span><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_WordNode</span><span 
class="cmtt-10">&#x00A0;WordNode;</span><br /><br /><span 
class="cmtt-10">WordNode</span><span 
class="cmtt-10">&#x00A0;*WordList;</span><br /><br /></div></div>
<!--l. 210--><p class="noindent" >The inverted list is a WordList. In the following we assume the following mapping:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_INVERTED_INDEX</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Start</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;end</span><span 
class="cmtt-10">&#x00A0;pointer</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;dynamic</span><span 
class="cmtt-10">&#x00A0;links.</span><br /><span 
class="cmtt-10">WordNode</span><span 
class="cmtt-10">&#x00A0;*start;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;list</span><br /><span 
class="cmtt-10">WordNode</span><span 
class="cmtt-10">&#x00A0;*end;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;end</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;list</span><br /><span 
class="cmtt-10">WordNode</span><span 
class="cmtt-10">&#x00A0;*hash[MAX_NUMBER_OF_SLOTS];</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;hash</span><span 
class="cmtt-10">&#x00A0;slot</span><br /><span 
class="cmtt-10">}</span><span 
class="cmtt-10">&#x00A0;__INVERTED_INDEX;</span><br /><br /><span 
class="cmtt-10">typedef</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;_INVERTED_INDEX</span><span 
class="cmtt-10">&#x00A0;INVERTED_INDEX;</span><br /><br /><br /></div></div>
<!--l. 232--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Logic</h3>
<!--l. 234--><p class="noindent" >When a new word <span 
class="cmti-10">w </span>in a document <span 
class="cmti-10">d </span>is found then <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">addWord()</span></span></span> is called; the program checks if a <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span>
exists in the list for the word.
<!--l. 236--><p class="noindent" >If the element does not exist, a new <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> is created (malloc) with a list composed of a single
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> (malloc) containing the identifier of the document (<span 
class="cmti-10">d</span>) and the number of occurrences of the
word in the document.
<!--l. 238--><p class="noindent" >If the element exists (i.e., a <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> containing <span 
class="cmti-10">w </span>exists), the program inserts a new <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">DocumentNode</span></span></span>
containing the identifier of the document (<span 
class="cmti-10">d</span>) and the number of occurrences of the work in the
document.
<!--l. 240--><p class="noindent" >The complexity of finding an element is linear. In order to speed up the retrieval of finding a word in the
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordList</span></span></span>, we use a hash table. The word itself can be used as hash key. The hash table itself is an
array. Each element of the hash table contains a pointer to a linked list of <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> (i.e.,
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordList</span></span></span>). When a new word is created, a hash index is computed. The hash function returns a
hash index between 0 and the maximum length of the hash table. Clearly, different words
might hash to the same index value - this is called a collision which we saw happen when
the URL was the key in the crawler program. A new <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> is added to the indexer list
(WordList).
<!--l. 242--><p class="noindent" >Consider an example. Assume that the hash index value of the word <span 
class="cmti-10">w </span>corresponds to the position 45 in
the hash table. When the element <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> is created, the element is added at position 45. When the
word <span 
class="cmti-10">w </span>has to be retrieved, the hash function is computed, and the list in position 45 is checked
(i.e., the program checks all the words in this list in order to find the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">WordNode</span></span></span> with the field
<span 
class="cmti-10">w</span>).
<!--l. 245--><p class="noindent" >The number of slots/bins <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">MAX_NUMBER_OF_SLOTS</span></span></span> should be large to to better performance (quicker access
to the data structure).
<!--l. 247--><p class="noindent" >To summarize, there are three possible solutions:
     <ul class="itemize1">
     <li class="itemize">simple linked list (not acceptable for performance reasons);
     </li>
     <li class="itemize">linked list accessible through a hash function (simple to implement);
                                                                                  
                                                                                  
     </li>
     <li class="itemize">linked list accessible through a dictionary (reuse of an existing data structure, more complex,
     but we can exploit existing functions to manage the data structure).</li></ul>
<!--l. 254--><p class="noindent" >A dictionary (like the one used in crawler) is useful if we have a simple linked list and we want to simply
add a hash table to access it without modifying the existing code. The use of the dictionary does not
require any modification to the implementation of the linked list: we are only using pointers to the
elements of the existing data structure.
<!--l. 256--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Implementation</h3>
<!--l. 257--><p class="noindent" >Start by thinking about the requirements, logic, and the design of the data structure. A good modular
design of this sub-system could be based on the following set of prototype functions/pseudo
code:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">for</span><span 
class="cmtt-10">&#x00A0;d</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;storedDocuments</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;loadedDocument</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;loadDocument(d);</span><br /><span 
class="cmtt-10">&#x00A0;documentId</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;getDocumentId(d);</span><br /><span 
class="cmtt-10">&#x00A0;currentPosition</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;while</span><span 
class="cmtt-10">&#x00A0;(currentPosition</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;getNextWordFromHTMLDocument(loadedDocument,</span><span 
class="cmtt-10">&#x00A0;word,</span><span 
class="cmtt-10">&#x00A0;position))</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;updateIndex(index,</span><span 
class="cmtt-10">&#x00A0;word,</span><span 
class="cmtt-10">&#x00A0;documentId);</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">saveIndexToFile(index);</span><br /><br /></div></div>
<!--l. 280--><p class="noindent" >where:
     <ul class="itemize1">
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">char*</span><span 
class="cmtt-10">&#x00A0;loadDocument(char*</span><span 
class="cmtt-10">&#x00A0;fileName)</span></span></span> loads the HTML document from a file. It receives
     as input the name of the file to be loaded and returns a string containing the loaded documen.
     <!--l. 284--><p class="noindent" ><span 
class="cmbx-10">Tip: </span>One challenge you haev is to open each file saved in the TARGET_DIRECTORY. But
     how do you know how many files are stored there? Well you could do something like try
     and open all files with numbers 1..N until fopen fails but that would not be efficient. We
     recommend that you use scandir to scan the directory. scandir will return all files in a directory
     in a specifici scandir data structure. Checkout <a 
href="http://linux.about.com/library/cmd/blcmdl3_scandir.htm" >scandir. </a>Make sure that you release the data
     structures used by scandir else you will have memory leaks. You can see the above link for
     help here.
     <!--l. 288--><p class="noindent" >If you scandir a directory there will be files for &#8220;.&#8221; and &#8220;..&#8221; which are special directory files
     and not regular files. You can use the <a 
href="http://linux.about.com/library/cmd/blcmdl2_stat.htm" >stat() function and macros </a>to help here.
     <!--l. 290--><p class="noindent" >This is a non ANSI library so the file that contains this scandir code should not be compiled
     with the - c99 flag. All the other files should use the normal mygcc compiler flags.
     </li>
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;getDocumentId(char*</span><span 
class="cmtt-10">&#x00A0;fileName)</span></span></span> generates a document identifier from the name of
     the file. We assume that the crawler saves the files using unique identifiers as names (i.e.,
     progressive numbers). The function receives in input the name of the file and returns an
     integer identifier.
     </li>
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;getNextWordFromHTMLDocument</span></span></span><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">(char*</span><span 
class="cmtt-10">&#x00A0;loadedDocument,</span><span 
class="cmtt-10">&#x00A0;char*</span><span 
class="cmtt-10">&#x00A0;word,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;currentPosition)</span></span></span>
     parses the string containing the loaded document skipping the HTML tags and returning
     the next word. The function receives as input the string containing the loaded document, an
                                                                                  
                                                                                  
     empty string that is used to return the result and the current position in the string from
     which the parsing is started/resumed. At the beginning <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">currentPosition</span></span></span> is set to 0.
     </li>
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;updateIndex(char*</span><span 
class="cmtt-10">&#x00A0;word,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;documentId,</span><span 
class="cmtt-10">&#x00A0;INVERTED_INDEX*</span><span 
class="cmtt-10">&#x00A0;index)</span></span></span> updates  the
     data structure containing the index. It receives as input a string containing the word and the
     identifier of the document. It returns 1 (true) if successful, 0 (false) otherwise.
     </li>
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;saveFile(INVERTED_INDEX*</span><span 
class="cmtt-10">&#x00A0;index)</span></span></span> saves the inverted index to a file (in the format as
     discussed above). It receives as input a pointer to the inverted index and returns 1 (true) if
     successful, 0 (false) otherwise.
     <!--l. 301--><p class="noindent" ><span 
class="cmbx-10">In the case of testing the indexer we have to save the index and the read it back</span>
     <span 
class="cmbx-10">from the stored file and reconstruct the data structures. In this case we need to</span>
     <span 
class="cmbx-10">code a function such as</span>:
     </li>
     <li class="itemize"><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">INVERTED_INDEX*</span><span 
class="cmtt-10">&#x00A0;readFile(char*</span><span 
class="cmtt-10">&#x00A0;file)</span></span></span> read an inverted index in from file and construct
     a new index, i.e., the list of WordNode and DocumentNode data structures that make up the
     original inverted index. Return a pointer to the new index.
     </li></ul>
<!--l. 308--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Output</h3>
<!--l. 310--><p class="noindent" >The indexer should write out the index to a file provided by the user.
<!--l. 312--><p class="noindent" >Save the generated index to a text file in the following format:
                                                                                  
                                                                                  
<div class="verbatim" id="verbatim-1">
cat&#x00A0;2&#x00A0;2&#x00A0;3&#x00A0;4&#x00A0;5
&#x00A0;<br />moose&#x00A0;1&#x00A0;5&#x00A0;7
&#x00A0;<br />...</div>
<!--l. 318--><p class="nopar" >
<!--l. 320--><p class="noindent" >Let us consider the entry <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;4</span><span 
class="cmtt-10">&#x00A0;5</span></span></span>: <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span></span></span> is the word, the number after <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span></span></span> is the number of
documents containing the word <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span></span></span>; the following <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">2</span><span 
class="cmtt-10">&#x00A0;3</span></span></span> means the document with identifier 2 has 3
occurrences of <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span></span></span> in it; the following 4 5 means that the document with identifier 4 has 5 occurrences of
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">cat</span></span></span> in it. <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">moose</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;5</span><span 
class="cmtt-10">&#x00A0;7</span></span></span> means that only one document with identifiers 5 has the word <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">moose</span></span></span> and <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">moose</span></span></span>
occurs 7 times in this document.
<!--l. 323--><p class="noindent" >A snippet of output could be:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">address</span><span 
class="cmtt-10">&#x00A0;19</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;4</span><span 
class="cmtt-10">&#x00A0;21</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;22</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;37</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;38</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;54</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;61</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;72</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;79</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;84</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;85</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">88</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;90</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;109</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;126</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;153</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;159</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;188</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">addressed</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;138</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;140</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">addresses</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;101</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adelfio</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;33</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;112</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;138</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adelson</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;104</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adhere</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;11</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;142</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">adhoc</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;88</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adirondacks</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;191</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">aditikabir</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;51</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjacent</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjudication</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;137</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">adjunct</span><span 
class="cmtt-10">&#x00A0;6</span><span 
class="cmtt-10">&#x00A0;4</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;5</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;43</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;44</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;139</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;142</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">adjuncthood</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;44</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjuncts</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;139</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjust</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;106</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;153</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjusted</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;153</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjustment</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adjustments</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;150</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;153</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;155</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">adlets</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;88</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">administered</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">administrative</span><span 
class="cmtt-10">&#x00A0;48</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;4</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;5</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;6</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;7</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;10</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;12</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;13</span><br /><span 
class="cmtt-10">1</span><span 
class="cmtt-10">&#x00A0;14</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;18</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;19</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;20</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;21</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;55</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;100</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;20</span><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;121</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">137</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;138</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;139</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;140</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;141</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;142</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;143</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;169</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;171</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;172</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;173</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">174</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;175</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;176</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;177</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;178</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;179</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;180</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;18</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;182</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;183</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;184</span><br /><span 
class="cmtt-10">1</span><span 
class="cmtt-10">&#x00A0;185</span><span 
class="cmtt-10">&#x00A0;1</span><span 
class="cmtt-10">&#x00A0;186</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 361--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Make and some design/coding tips</h3>
<!--l. 363--><p class="noindent" >Because indexer uses scandir and it&#8217;s currently not ANSI C/C99/POSIX compliant you will get make
errors with the standard flags.
<!--l. 366--><p class="noindent" >So assume you have a source file file.c that has a function called:
<!--l. 369--><p class="noindent" >char *file;
<!--l. 371--><p class="noindent" >file = FindFilesInPath(path) that uses scandir/alphasort as shown in the example in class
<!--l. 374--><p class="noindent" >Then if you use the standard flags in Makefile you will get errors:
<!--l. 376--><p class="noindent" >CFLAGS=-ggdb -pedantic -Wall -std=c99
<!--l. 378--><p class="noindent" >you will get:
<!--l. 380--><p class="noindent" >../util/file.c: In function FindFilesInPath:
<!--l. 382--><p class="noindent" >../util/file.c:236:5: warning: implicit declaration of function scandir
<!--l. 384--><p class="noindent" >../util/file.c:236:37: error: alphasort undeclared (first use in this function)
<!--l. 387--><p class="noindent" >../util/file.c:236:37: note: each undeclared identifier is reported only once for each function it appears
in
<!--l. 390--><p class="noindent" >make: *** [indexer] Error 1
<!--l. 392--><p class="noindent" >Because scandir in non compliant use the following flags on file.c
<!--l. 394--><p class="noindent" >CFLAGS1=-ggdb -Wall
                                                                                  
                                                                                  
<!--l. 396--><p class="noindent" >$(CC) $(CFLAGS1) -c ../util/file.c
<!--l. 398--><p class="noindent" >For all other files use standard the standard flags.
<!--l. 400--><p class="noindent" >CFLAGS=-ggdb -pedantic -Wall -std=c99
<!--l. 402--><p class="noindent" >That&#8217;s it for make. For the final TSE programming assignment you will write a more complex Makefile
that will turn all files you have refactored in /util into a library and your Makefile will link to that. But
that is for next week.
<!--l. 407--><p class="noindent" >Tip: regards file = FindFilesInPath(path); you can design it to return a pointer to the name of a file or
NULL if no files left. The idea is that FindFilesInPath(path) would have a special case. First time it is
called it calls scandir and stores all files in an internal data structure and returns a pointer to the first file.
Next, time it is called it simply returns a pointer to the next file name (assuming that there
are other file names). The last time it is calls there are no more names to pop off the list
so it returns NULL. You can design the as you wish but this is a nice way to get one file
at a time from the directory and process it (that is, index the keywords). You index logic
(say buildIndexFromDirectory that returns a pointer to the inverted index) would be driven
by:
<!--l. 420--><p class="noindent" >INVERTED&#x02D9;INDEX *buildIndexFromDirectory(char* path) <span 
class="cmsy-10">{</span>
<!--l. 422--><p class="noindent" >.. code
<!--l. 424--><p class="noindent" >while ((file = FindFilesInPath(path)) != NULL) <span 
class="cmsy-10">{</span>
<!--l. 426--><p class="noindent" >... code
<!--l. 428--><p class="noindent" ><span 
class="cmsy-10">}</span>
<!--l. 430--><p class="noindent" ><span 
class="cmsy-10">}</span>
<!--l. 432--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>Illustration of data structures in action</h3>
<!--l. 434--><p class="noindent" >The main goal of the indexer is to keep an account of the words found in a document and its
occurrence. If a word is common to a number of documents then the inverted index must
keep a list of all documents that are word is found in and their occurence. The figure below
shows an example inverted index. Note that the hash(&#8220;dog&#8221;) has a hash value of 47 and points
to a WordNode that maintains the word (dog) and is linked into a double linked list where
start and end are used to point to the start and end of the double linked list of WordNode,
respectively.
<!--l. 436--><p class="noindent" >Note, that three DocumentNodes are linked off the WordNode. Note, that this is an ordred
single linked list (it is ordered by document ID). So three files has the word dog. Document
1 (file 1) has 1 instance and documents 2, and 5, 3 and 14 occurences, respectively. Note,
that when you hash(&#8220;dog&#8221;) it returns a hash index o 47. The hash table holds pointers of
WordNode.
                                                                                  
                                                                                  
<!--l. 438--><p class="noindent" >Study this simple example.
<!--l. 440--><p class="noindent" ><hr class="figure"><div class="figure" 
>
                                                                                  
                                                                                  
<a 
 id="x1-120012"></a>
                                                                                  
                                                                                  
                                                                                  
                                                                                  
<!--l. 441--><p class="noindent" ><img 
src="lab51x.png" alt="PIC" class="graphics" width="578.15999pt" height="795.49467pt" ><!--tex4ht:graphics  
name="lab51x.png" src="index.eps"  
-->
<br /> <div class="caption" 
><span class="id">Figure&#x00A0;2: </span><span  
class="content">Indexer: reads and parses the saved files and creates an inverted index before writing
out the data to a stored file.</span></div><!--tex4ht:label?: x1-120012 -->
                                                                                  
                                                                                  
<!--l. 444--><p class="noindent" ></div><hr class="endfigure">
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Similarity with the Crawler data structures</h3>
<!--l. 448--><p class="noindent" >The INVERTED_INDEX is the same as the DICTIONARY used by the crawler. It provides a general
double linked list and a hash table. This time the key is a word such as dog or cat rather than the URL;
for example hashIndex = hash(&#8220;dog&#8221;);
<!--l. 451--><p class="noindent" >Start keeps a double linked list of WordNode, which are similar to DNODES. The WordNode holds the
word (dog) and point to DocumentNodes (like URLNODE in some sense). The DocumentNodes maintains
the document ID (file name 1 ...N) and the word frequency (how many dogs in document 1). Because
other documents may also have the word dog DocumentNodes are linked together in a single linked list for
a particular word (dog). There is one WordNode per word, and the WordNode holds the start of the linked
list of DocumentNodes.
<!--l. 454--><p class="noindent" >The index also has to be able to &#8220;reload&#8221; the index data structure from the index.dat for the
query engine to use. So you must write the code to &#8220;reload&#8221;. We suggest that you write a
simple bash script that does the following because you need to test that an inverted index can
be written to a file and reloaded - and that it is the same index. The way to do that is to
create the index and write the index.dat. Then reload the index and save it to another file
new_index.dat.
<!--l. 461--><p class="noindent" >Then use the bash command diff/compare the two files. If they are the same then your code works like a
dream.
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-14000"></a>Automatically testing indexer</h3>
<!--l. 466--><p class="noindent" >You need to write the indexer_test.sh to do this.
<!--l. 468--><p class="noindent" >The flow of your script will be:
<!--l. 470--><p class="noindent" >#!/bin/bash <br 
class="newline" />make clean<br 
class="newline" />make index<br 
class="newline" />
<!--l. 474--><p class="noindent" >DATA_PATH=../../data<br 
class="newline" />INDEX_FILE=index.dat<br 
class="newline" />
<!--l. 477--><p class="noindent" ># We index a directory, recorded it into a file (index.dat) and sort.<br 
class="newline" /># Then we read index.dat to memory and write it back to see <br 
class="newline" /># whether program can read in and write out index storage file correctly.<br 
class="newline" />
                                                                                  
                                                                                  
<!--l. 481--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./index</span><span 
class="cmtt-10">&#x00A0;$DATA_PATH</span><span 
class="cmtt-10">&#x00A0;$INDEX_FILE</span><span 
class="cmtt-10">&#x00A0;$INDEX_FILE</span><span 
class="cmtt-10">&#x00A0;reloaded_written_new_index.dat</span></span></span>
<!--l. 483--><p class="noindent" ># you can use sort to order the keyword to look at them else they remain unordered<br 
class="newline" />echo &#8221;Index have been built, read and rewritten correctly!&#8221;<br 
class="newline" />sort [parameters]<br 
class="newline" />diff [parameters) # check return value of diff<br 
class="newline" />echo &#8221;Index storage passed test!&#8221;<br 
class="newline" />else echo &#8221;Index storage didn&#8217;t pass test!&#8221;<br 
class="newline" />fi<br 
class="newline" />#clean up any files you used<br 
class="newline" />rm -f<br 
class="newline" />
<!--l. 495--><p class="noindent" >Have a think about the structure and implementation of this bash script.
<!--l. 498--><p class="noindent" >OK. You are done.
<!--l. 500--><p class="noindent" ><span 
class="cmbx-10">Tip</span>: Make sure you always logout when you are done and see the prompt to login again before you leave
the terminal.
 
</body></html> 

                                                                                  


